#lang honu

require prefix allegro_ racket_allegro_5;

randomRange(low, high){
  random(integer((high - low) * 100)) / 100 + low
}

color(r, g, b){
  allegro_map_rgb_f(r, g, b)
}

colorAlpha(r, g, b, a){
  allegro_map_rgba_f(r, g, b, a)
}

var pi = 3.141592526
  
loadSound(path){
  allegro_load_sample(path)
}

screenWidth(){
  allegro_get_display_width(allegro_get_current_display())
}

screenHeight(){
  allegro_get_display_height(allegro_get_current_display())
}

screen(){
  allegro_get_backbuffer(allegro_get_current_display())
}

drawCenter(bitmap, x, y){
  allegro_draw_scaled_rotated_bitmap(bitmap, allegro_get_bitmap_width(bitmap) / 2, allegro_get_bitmap_height(bitmap) / 2, x, y, 1, 1, 0, 0)
}

drawCenterRotated(bitmap, x, y, angle){
  allegro_draw_scaled_rotated_bitmap(bitmap, allegro_get_bitmap_width(bitmap) / 2, allegro_get_bitmap_height(bitmap) / 2, x, y, 1, 1, angle * pi / 180, 0)
}

class Explosion(x, y, size){
  var ticks = 0
  draw(sprites){
    var bitmap = currentSprite(sprites)
    when bitmap != false then {
      drawCenter(bitmap, x, y)
    }
  }

  currentSprite(sprites){
    if size == 2 then {
      sprites->getExplosionLarge(ticks)
    } else {
      sprites->getExplosionSmall(ticks)
    }
  }

  dead?(sprites){
    currentSprite(sprites) == false
  }

  act(){
    ticks += 1
  }
}

class Asteroid(x, y, size, angle, speed){
  var life = size * 3
  var ticks = random(100)
  draw(sprites){
    // allegro_draw_bitmap(currentSprite(sprites), x, y, 0)
    drawCenter(currentSprite(sprites), x, y)
  }

  currentSprite(sprites){
    if size == 3 then {
      sprites->getAsteroidLarge(ticks)
    } else if size == 2 then {
      sprites->getAsteroidMedium(ticks)
    } else if size == 1 then {
      sprites->getAsteroidSmall(ticks)
    } else {
      false
    }
  }

  distance(x1, y1, x2, y2){
    sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))
  }

  getSize(sprites){
    sizeof(bitmap){
      allegro_get_bitmap_width(bitmap) / 2
    }
    sizeof(currentSprite(sprites))
  }

  touch(x, y, radius, sprites){
    distance(x, y, this.x, this.y) < radius + getSize(sprites)
  }

  explode(){
    make(){
        new Asteroid(x + randomRange(-size / 2, size / 2), y + randomRange(-size / 2, size / 2), size - 1, random(360), randomRange(1, 3))
    }

    if size > 1 then {
      var max = random(3) + 2;
      [make(): i = 0 to max]
    } else {
      []
    }
  }

  hit(){
    life -= 1
  }

  act(){
    ticks += 1
    x += cos(angle * pi / 180) * speed
    y += sin(angle * pi / 180) * speed
    when x < 0 then {
      x = screenWidth()
    }
    when x > screenWidth() then {
      x = 0
    }
    when y < 0 then {
      y = screenHeight()
    }
    when y > screenHeight() then {
      y = 0
    }
  }
}

class Player(x, y, angle, speed, shots){
  var turnSpeed = 3
  var dx = 0
  var dy = 0
  var score = 0
  var alive = true

  var goLeft = false
  var goRight = false
  var goForward = false
  var goBackward = false
  var doShoot = false
  var size = 18
  var spawnCount = 0
  var invincible = 0

  var shootSound = loadSound("data/sounds/laser.wav")

  getRadius(){
    size
  }

  die(){
    alive = false
    gainScore(-500)
    spawnCount = 30
  }

  tryRespawn(){
    if spawnCount > 0 then {
      spawnCount -= 1
      false
    } else {
      true
    }
  }

  respawn(newx, newy){
    x = newx
    y = newy
    dx = 0
    dy = 0
    invincible = 100
    alive = true
    goLeft = false
    goRight = false
    goForward = false
    goBackward = false
    doShoot = false
  }

  isInvincible(){
    invincible > 0
  }

  draw(sprites){
    drawCenterRotated(sprites->getShip(), x, y, angle + 90)
    when isInvincible() then {
      allegro_draw_filled_circle(x, y, size * 2, colorAlpha(0, 0, 1, min(invincible, 50) / 200))
      allegro_draw_circle(x, y, size * 2, colorAlpha(0, 0, 1, min(invincible, 50) / 80), 2)
    }
  }

  turnLeft(){
    angle -= turnSpeed
  }

  turnRight(){
    angle += turnSpeed
  }

  gainScore(amount){
    score += amount
  }

  forward(direction){
    var max = 3
    dx += cos(angle * pi / 180) * speed * direction
    dy += sin(angle * pi / 180) * speed * direction
    when dx > max then {
      dx = max
    }
    when dx < -max then {
      dx = -max
    }
    when dy > max then {
      dy = max
    }
    when dy < -max then {
      dy = -max
    }
  }

  act(world){

    when goLeft then turnLeft()
    when goRight then turnRight()
    when goForward then forward(1)
    when goBackward then forward(-1)
    when doShoot then {
      world->addBullet(x + cos(angle * pi / 180) * size,
                       y + sin(angle * pi / 180) * size, angle, 5)
      allegro_play_sample(shootSound)
      doShoot = false
    }

    x += dx
    y += dy

    when invincible > 0 then {
      invincible -= 1
    }

    when x < 0 then {
      x = screenWidth()
    }
    when x > screenWidth() then {
      x = 0
    }
    when y < 0 then {
      y = screenHeight()
    }
    when y > screenHeight() then {
      y = 0
    }
  }

  handleInput(event){
    match event with
      (allegro_KeyboardEvent type source timestamp display keycode unicode modifiers repeat){

        macro direction(){ what:identifier good:expression bad:expression }{
          syntax(
            if type == 'KeyDown and keycode == good then {
              what = true
            } else if type == 'KeyUp and keycode == good then {
              what = false
            } else if type == 'KeyDown and keycode == bad then {
              what = false
            } else {
            })
        }

        direction goLeft 'Left 'Right
        direction goRight 'Right 'Left
        direction goForward 'Up 'Down
        direction goBackward 'Down 'Up

        when type == 'KeyDown and keycode == 'Space then {
          doShoot = true
        }

        /* Good example of where macros can help. The below code is refactored into
         * the macro above. A function could not be used because the variables being
         * modified are not boxed. 
         */

        /*
        if type = 'KeyDown and keycode = 'Left {
          goLeft = true
          goRight = false
        } else if type = 'KeyUp and keycode = 'Left {
          goLeft = false
        } else if type = 'KeyDown and keycode = 'Right {
          goLeft = false
          goRight = true
        } else if type = 'KeyUp and keycode = 'Right {
          goRight = false
        } else if type = 'KeyDown and keycode = 'Up {
          goForward = true
          goBackward = false
        } else if type = 'KeyUp and keycode = 'Up {
          goForward = false
        } else if type = 'KeyDown and keycode = 'Down {
          goForward = false
          goBackward = true
        } else if type = 'KeyDown and keycode = 'Up {
          goBackward = false
        } else {
        }
        */
     }
  }
}

class Bullet(x, y, angle, speed){
  var radius = 4
  var alive = true
  draw(){
    allegro_draw_filled_circle(x, y, radius, color(1, 1, 0))
  }

  hit(){
    alive = false
  }

  getX(){ x }
  getY(){ y }

  act(){
    x += cos(angle * pi / 180) * speed
    y += sin(angle * pi / 180) * speed
  }
}

class Star(x, y, brightness){
  var shine = color(brightness, brightness, brightness)
  draw(){
    allegro_draw_filled_circle(x, y, 1, shine)
  }
}

class World(player){
  var asteroids = []
  var bullets = []
  var stars = generateStars()
  var explodes = []
  var level = 0

  var asteroidExplodeSound = loadSound("data/sounds/explode.wav")
  var bulletHitSound = loadSound("data/sounds/pop.wav")

  makeAsteroid(){
    new Asteroid(randomRange(0, screenWidth()), randomRange(0, screenHeight()), 3, randomRange(0, 360), randomRange(1, 3))
  }

  generateStars(){
    make(){
      new Star(randomRange(0, screenWidth()), randomRange(0, screenHeight()), randomRange(0, 1))
    }

    // [make(): i <- 0 to screenWidth() * screenHeight() / 1000]
    // 400: 30
    // 300: 38
    // 200: 40
    [make(): i = 0 to 200]
  }

  draw_stars(){
    for star in stars do {
      star->draw()
    }
  }

  draw(sprites){
    allegro_draw_filled_rectangle(0, 0, screenWidth(), screenHeight(), color(0, 0, 0))
    draw_stars()
    for asteroid in asteroids do {
      asteroid->draw(sprites)
    }
    for explode in explodes do {
      explode->draw(sprites)
    }
    for bullet in bullets do {
      bullet->draw()
    }

    when player.alive then {
      player->draw(sprites)
    }
  }

  addBullet(x, y, angle, speed){
    bullets = new Bullet(x, y, angle, speed) :: bullets
  }

  makeSmallExplode(x, y){
    new Explosion(x, y, 1)
  }

  makeLargeExplode(x, y){
    new Explosion(x, y, 2)
  }

  isClear(x, y, sprites){
    fold touch = false,
         asteroid in asteroids do {
      touch or asteroid->touch(x, y, player->getRadius() * 2, sprites)
    }
  }

  setupAsteroid(sprites){
    var asteroid = makeAsteroid()
    if not asteroid->touch(player.x, player.y, player->getRadius(), sprites) then {
      asteroid
    } else {
      setupAsteroid(sprites)
    }
  }

  act(sprites){
    when null?(asteroids) then {
      level += 1
      asteroids = [setupAsteroid(sprites): i = 0 to level + 4]
    }

    var more_asteroids = []
    hitAsteroid(asteroid){
      asteroid->hit()
      when asteroid.life == 0 then {
        more_asteroids = append(more_asteroids, asteroid->explode())
        allegro_play_sample(asteroidExplodeSound)
        explodes = makeLargeExplode(asteroid.x, asteroid.y) :: explodes
        player->gainScore(asteroid.size * 100)
      }
    }

    for asteroid in asteroids do {
      asteroid->act()

      when player.alive and not player->isInvincible() and asteroid->touch(player.x, player.y, player->getRadius(), sprites) then {
        hitAsteroid(asteroid)
        allegro_play_sample(asteroidExplodeSound)
        player->die()
        explodes = makeLargeExplode(player.x, player.y) :: explodes
      }
    }

    for bullet in bullets do {
      bullet->act()
    }

    for explode in explodes do {
      explode->act()
    }

    explodes = [explode: explode = explodes where not explode->dead?(sprites)]

    for bullet in bullets do {
      for asteroid in asteroids do {
        when bullet.alive and asteroid->touch(bullet.x, bullet.y, bullet.radius, sprites) then {
          hitAsteroid(asteroid)
          
          bullet->hit()
          player->gainScore(10)
          explodes = makeSmallExplode(bullet.x, bullet.y) :: explodes
          allegro_play_sample(bulletHitSound)
        }
      }
    }

    asteroids = append(asteroids, more_asteroids)

    alive?(bullet){
      bullet.alive and
      bullet->getX() > 0 and bullet->getX() < screenWidth() and
      bullet->getY() > 0 and bullet->getY() < screenHeight()
    }

    bullets = [bullet: bullet = bullets where alive?(bullet)]

    if player.alive then {
      player->act(this)
    } else {
      when player->tryRespawn() then {
        player->respawn(screenWidth() / 2, screenHeight() / 2)
      }
    }
    
    asteroids = [asteroid: asteroid = asteroids where asteroid.life > 0]
  }
}

escape(s){ s }

endsWith(string, end){
  regexp_match(regexp(string_append(escape(end), "$")), string)
}

findFiles(path, search){
  matches(entry){
    endsWith(entry, search)
  }

  find_files(matches, path)
}

class SpriteManager(){
  var asteroidLarge = loadSprites("data/large")
  var asteroidMedium = loadSprites("data/medium")
  var asteroidSmall = loadSprites("data/small")

  var explodeSmall = loadSprites("data/small-explode")
  var explode = loadSprites("data/explode")
  var ship = loadSprite("data/ships/ship1.png")

  make_bitmap(path){
    var bitmap = allegro_load_bitmap(path)
    allegro_convert_mask_to_alpha(bitmap, color(1, 0, 1))
    bitmap
  }

  loadSprites(path){
    [make_bitmap(file): file = findFiles(path, ".png")]
  }

  loadSprite(path){
    make_bitmap(path)
  }
    
  get(from, ticks){
    from[integer(ticks) % length(from)]
  }

  getShip(){
    ship
  }

  getExplode(sprites, ticks){
    if integer(ticks) >= length(sprites) then {
      false
    } else {
      sprites[integer(ticks)]
    }
  }

  getExplosionLarge(ticks){
    getExplode(explode, ticks / 3)
  }

  getExplosionSmall(ticks){
    getExplode(explodeSmall, ticks / 3)
  }

  getAsteroidLarge(ticks){
    get(asteroidLarge, ticks / 4)
  }
  
  getAsteroidMedium(ticks){
    get(asteroidMedium, ticks / 4)
  }
  
  getAsteroidSmall(ticks){
    get(asteroidSmall, ticks / 4)
  }

  destroy(){
    /* TODO
    macro destroy_bitmaps(){ thing:identifier ... }{
      syntax((for bitmap in thing do {
               allegro_destroy_bitmap(bitmap)
             }) ...)
    }
    destroy_bitmaps asteroidLarge asteroidMedium asteroidSmall explodeSmall explode;
    */

    for bitmap in asteroidLarge do allegro_destroy_bitmap(bitmap)
    for bitmap in asteroidMedium do allegro_destroy_bitmap(bitmap)
    for bitmap in asteroidSmall do allegro_destroy_bitmap(bitmap)
    for bitmap in explodeSmall do allegro_destroy_bitmap(bitmap)
    for bitmap in explode do allegro_destroy_bitmap(bitmap)
    allegro_destroy_bitmap(ship)
  }
}

twoPlaces(x){
  integer(x * 100) / 100.0 + 0.0
}

run_game(queue){
  var need_redraw = false
  var done = false
  var player = new Player(screenWidth() / 2, screenHeight() / 2, 0, 0.2, 5)
  var world = new World(player)
  var sprites = new SpriteManager()

  var font = allegro_load_font("arial.ttf", 20, 0)

  var fpsTimer = allegro_create_timer(0.5)
  allegro_register_event_source(queue, allegro_get_timer_event_source(fpsTimer))
  allegro_start_timer(fpsTimer)

  var fpsCount = 0
  var lastTime = currentMilliseconds()
  var fps = 0

  draw(){
    world->draw(sprites)
    allegro_draw_text(font, color(1,1,1), screenWidth(), 10, 'AlignRight, format("FPS ~a", twoPlaces(fps)))
    allegro_draw_text(font, color(1,1,1), 0, 10, 'AlignLeft, format("Score: ~a", player.score))
    allegro_flip_display()
  }


  logic(event){
    match event with
      (allegro_KeyboardEvent type source timestamp display keycode unicode modifiers repeat){
        // printf("Pressed ~a\n", keycode)
        if type == 'KeyChar and keycode == 'Escape then {
          done = true
        } else if type == 'KeyChar and keycode == 'D then {
          player->die()
        } else {
          when player.alive then {
            player->handleInput(event)
          }
        }
      }
      (allegro_TimerEvent type source timestamp count error){
        // printf("Source ~a fps source ~a\n", source, fpsTimer)
        if allegro_same_pointer(source, fpsTimer) then {
          var now = currentMilliseconds()
          fps = fpsCount / ((now - lastTime) / 1000)
          fpsCount = 0
          lastTime = now
        } else {
          world->act(sprites)
          need_redraw = true
        }
      } else {
      }
  }

  while not done {
    when need_redraw and allegro_is_event_queue_empty(queue) then {
      fpsCount += 1
      draw()
      need_redraw = false
    }

    logic(allegro_wait_for_event(queue))
  }

  sprites->destroy()
}

main(){
  when not allegro_install_system() then {
    printf("Could not install allegro!\n")
  }
 
  allegro_setup_audio()
  allegro_init_primitives_addon()
  allegro_install_keyboard()
  allegro_init_image_addon()
  allegro_init_font_addon()
  allegro_init_ttf_addon()

  // Default blender uses pre-multiplied alpha, but we want to create colors
  // with an alpha channel directly
  allegro_set_blender('Add, 'Alpha, 'InverseAlpha)

  var FPS = 40
  var width = 800
  var height = 600
  
  var display = allegro_create_display(width, height)
  
  var timer = allegro_create_timer(1.0/FPS)
  var queue = allegro_create_event_queue()
  
  allegro_register_event_source(queue, allegro_get_timer_event_source(timer))
  allegro_register_event_source(queue, allegro_get_keyboard_event_source())
  allegro_register_event_source(queue, allegro_get_display_event_source(display))
  
  allegro_start_timer(timer)

  run_game(queue)
  
  allegro_uninstall_system()
}

main()
